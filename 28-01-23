Binary Search

class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int ans=-1;
        int start=0,end=n-1;
        while(start<=end){
            int mid =(start+end)/2;
            if(target==nums[mid]){
                return mid;
            }
            if(target<nums[mid]){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
}

Insert into a binary search tree

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode newNode=new TreeNode(val);
        if(root==null){
            root=newNode;
            return root;
        }
        TreeNode parent=null;
        TreeNode cur=root;
        while(cur!=null){
            parent=cur;
            if(val<cur.val)
               cur=cur.left;
            else
               cur=cur.right;
        }
        if(val<parent.val){
            parent.left=newNode;
        }
        else{
            parent.right=newNode;
        }
        return root;
    }
}

Search in a binary search tree

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root == null){
            return null;
        }
        while(root!=null && root.val!=val){
            if(val>root.val){
                root = root.right;
            }
            else{
                root = root.left;
            }
        }
        return root;
    }
}
