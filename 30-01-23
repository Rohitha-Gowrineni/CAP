Binary Tree Levelorder Traversal

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> l1 = new LinkedList<>();
        Queue <TreeNode> q1 = new LinkedList<>();
        if(root==null){
            return l1;
        }
        q1.add(root);
        while(!q1.isEmpty()){
            List<Integer> l2 = new LinkedList<>();
            int len = q1.size();
            for(int i=0;i<len;i++){
                TreeNode cur = q1.poll();
                l2.add(cur.val);
                if(cur.left!=null){
                    q1.add(cur.left);
                }
                if(cur.right!=null){
                    q1.add(cur.right);
                }
            }
           l1.add(l2);
        }
        return l1;
    }
}

Binary Tree ZigZag Levelorder Traversal

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
         List<List<Integer>> l1=new LinkedList<>();
        Queue<TreeNode> q1=new LinkedList<>();
        if(root==null){
            return l1 ;
        }
        q1.add(root);
        boolean bool = true;
        while(!q1.isEmpty()){
            List<Integer> l2=new LinkedList<>();
            int size=q1.size();
            for(int i=1;i<=size;i++){
                TreeNode curr=q1.poll();
                if(bool==true){
                    l2.add(curr.val);
                }
                else{
                    l2.add(0,curr.val);
                }
                if(curr.left!=null){
                    q1.add(curr.left);
                }
                if(curr.right!=null){
                    q1.add(curr.right);
                }
            }
            bool=(bool)?false:true;
            l1.add(l2);
        }
        return l1;
    }
}


N-array postorder Traversal

class Solution {
    List<Integer> l1=new ArrayList<>();
    public List<Integer> postorder(Node root) {
        post(root);
        return l1;
    }
    public void post(Node root){
        if(root==null)
          return;
        for(Node child:root.children){
            post(child);
        }
        l1.add(root.val);
    }
}
